import telebot
from telebot import types

with open('token.txt') as f:
    token = f.readline().rstrip()
    chat_id_Nikita = f.readline().rstrip()

bot = telebot.TeleBot(token)
rating = {'common': []}
feedback = ""

# -------------------------------- –û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def correcting_answer(message, text, func):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    key_1 = types.KeyboardButton('–î–∞')
    key_2 = types.KeyboardButton('–ù–µ—Ç')
    keyboard.add(key_1, key_2)
    bot.reply_to(message, '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ ' + text + '?', reply_markup=keyboard)
    bot.register_next_step_handler(message, func)


@bot.message_handler(content_types=['text'])
def start(message):
    if message.text == '–û—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É':
        rate_trip(message)
    elif message.text == '–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥':
        send_rating(message)
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É':
        cancel_grade(message)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ/–æ—Ç–∑—ã–≤':
        post_message(message)
    else:
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2, resize_keyboard=True)
        key_1 = types.KeyboardButton('–û—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É')
        key_2 = types.KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥')
        key_3 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É')
        key_4 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ/–æ—Ç–∑—ã–≤')
        keyboard.add(key_1, key_2, key_3, key_4)
        msg = bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=keyboard)
        bot.register_next_step_handler(msg, command)


@bot.callback_query_handler(func=lambda call: True)
def command(call):
    if call.text == '–û—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É':
        rate_trip(call)
    elif call.text == '–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥':
        send_rating(call)
    elif call.text == '–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É':
        cancel_grade(call)
    elif call.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ/–æ—Ç–∑—ã–≤':
        post_message(call)
    else:
        start(call)


# --------------------------------  –û—Ü–µ–Ω–∫–∞ –ø–æ–µ–∑–¥–∫–∏
@bot.message_handler(commands=['start'])
def rate_trip(message):
    question = '–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –ù–∏–∫–∏—Ç—ã'
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    key_1 = types.KeyboardButton('1')
    key_2 = types.KeyboardButton('2')
    key_3 = types.KeyboardButton('3')
    key_4 = types.KeyboardButton('4')
    key_5 = types.KeyboardButton('5')
    key_6 = types.KeyboardButton('6')
    key_7 = types.KeyboardButton('7')
    key_8 = types.KeyboardButton('8')
    key_9 = types.KeyboardButton('9')
    key_10 = types.KeyboardButton('10')
    keyboard.add(key_1, key_2, key_3, key_4, key_5, key_6, key_7, key_8, key_9, key_10)
    msg = bot.reply_to(message, question, reply_markup=keyboard)
    bot.register_next_step_handler(msg, calculation_rating)


# -------------------------------- –†–µ–π—Ç–∏–Ω–≥
# –ø–æ–¥—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
@bot.callback_query_handler(func=lambda call: True)
def calculation_rating(call):
    global rating
    rating['common'].append(int(call.text))
    if call.from_user.id in rating:
        rating[call.from_user.id].append(int(call.text))
    else:
        rating.update({call.from_user.id: [int(call.text)]})
    start(call)


# –≤—ã–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
@bot.message_handler(commands=['rating'])
def send_rating(message):
    global rating
    if rating["common"]:
        reply = "–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–≤–µ–Ω " + str(round(sum(rating['common']) / len(rating['common']), 2))
        if message.from_user.id in rating:
            reply += '\n–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–≤–µ–Ω ' + str(
                round(sum(rating[message.from_user.id]) / len(rating[message.from_user.id]), 2))
        else:
            reply += "\n–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else:
        reply = "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    bot.reply_to(message, reply)


# -------------------------------- –û—Ç–º–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∏
@bot.message_handler(commands=['cancel'])
def cancel_grade(message):
    global rating
    if message.from_user.id in rating:
        correcting_answer(message, '–æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É', cancel_grade_func)
    else:
        bot.reply_to(message, '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏')


@bot.callback_query_handler(func=lambda call: True)
def cancel_grade_func(call):
    global rating
    if call.from_user.id in rating and call.text == "–î–∞":
        if rating[call.from_user.id] != []:
            rating["common"].remove(rating[call.from_user.id].pop())
        else:
            bot.reply_to(call, '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏')
    start(call)


# -------------------------------- –ß–∞–µ–≤—ã–µ –∏ –æ—Ç–∑—ã–≤
# –í—ã–±–æ—Ä –º–µ–∂–¥—É —á–∞–µ–≤—ã–º–∏ –∏ –æ—Ç–∑—ã–≤–æ–º
@bot.message_handler(commands=['message'])
def post_message(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    key_1 = types.KeyboardButton('–û—Ç–∑—ã–≤')
    key_2 = types.KeyboardButton('–ß–∞–µ–≤—ã–µ')
    keyboard.add(key_1, key_2)
    bot.reply_to(message, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–∏–∫–∏—Ç–µ?', reply_markup=keyboard)
    bot.register_next_step_handler(message, post_message_func)


# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def post_message_func(message):
    if message.text == '–ß–∞–µ–≤—ã–µ':
        text = 'üí∏'
        bot.send_message(chat_id_Nikita, text)
        bot.reply_to(message, '*–ß–∞–µ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ù–∏–∫–∏—Ç–µ*', parse_mode='Markdown')
        start(message)
    else:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤ –ù–∏–∫–∏—Ç–µ')
        bot.register_next_step_handler(message, send_feedback)


# –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ç–∑—ã–≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
@bot.callback_query_handler(func=lambda call: True)
def send_feedback(message):
    global feedback
    feedback = message.text
    correcting_answer(message, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤', send_feedback_func)


@bot.callback_query_handler(func=lambda call: True)
def send_feedback_func(message):
    if message.text == "–î–∞":
        bot.send_message(chat_id_Nikita, feedback)
        bot.reply_to(message, '*–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ù–∏–∫–∏—Ç–µ*', parse_mode='Markdown')
    else:
        bot.reply_to(message, '*–û—Ç–∑—ã–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ù–∏–∫–∏—Ç–µ*', parse_mode='Markdown')
    start(message)


bot.polling()
